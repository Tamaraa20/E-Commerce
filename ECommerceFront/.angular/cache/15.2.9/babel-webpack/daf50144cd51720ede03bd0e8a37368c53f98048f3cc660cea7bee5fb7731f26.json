{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/navigation.service\";\nimport * as i3 from \"../services/user-authentication.service\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Email is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Email is Invalid. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password should be at least 6 and at the max 15 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(fb, navigationService, userAuthentication) {\n    this.fb = fb;\n    this.navigationService = navigationService;\n    this.userAuthentication = userAuthentication;\n    this.message = '';\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      pwd: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(15)]]\n    });\n  }\n  get Email() {\n    return this.loginForm.get('email');\n  }\n  get PWD() {\n    return this.loginForm.get('pwd');\n  }\n  login() {\n    this.navigationService.loginUser(this.Email.value, this.PWD.value).subscribe(res => {\n      if (res.toString() !== 'invalid') {\n        this.message = 'Logged In Successfully.';\n        this.userAuthentication.setUser(res.toString());\n        console.log(this.userAuthentication.getUser());\n      } else {\n        this.message = 'Invalid Credentials!';\n      }\n    });\n  }\n}\n_class = LoginComponent;\n_class.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.NavigationService), i0.ɵɵdirectiveInject(i3.UserAuthenticationService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-login\"]],\n  decls: 19,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"for\", \"pwd\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"pwd\", \"formControlName\", \"pwd\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"d-block\", \"mx-auto\", \"btn\", \"btn-outline-primary\", 3, \"disabled\"], [1, \"mt-3\", \"text-center\"], [1, \"text-success\"], [1, \"form-text\", \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 2, 0, \"div\", 4);\n      i0.ɵɵtemplate(6, LoginComponent_div_6_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 5);\n      i0.ɵɵtext(9, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 6);\n      i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 2, 0, \"div\", 4);\n      i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\")(14, \"button\", 7);\n      i0.ɵɵtext(15, \" Login \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"h5\", 9);\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"required\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"email\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"required\"]) && (ctx.PWD.dirty || ctx.PWD.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"minlength\"]) || (ctx.PWD.errors == null ? null : ctx.PWD.errors[\"maxlength\"]) && (ctx.PWD.dirty || ctx.PWD.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAA8CA,UAAU,QAAQ,gBAAgB;;;;;;;;ICK5EC,+BAAwG;IACtGA,mCACF;IAAAA,iBAAM;;;;;IACNA,+BAAqG;IACnGA,mCACF;IAAAA,iBAAM;;;;;IAONA,+BAAkG;IAChGA,sCACF;IAAAA,iBAAM;;;;;IACNA,+BAC+F;IAC7FA,kFACF;IAAAA,iBAAM;;;ADdV,OAAM,MAAOC,cAAc;EAIzBC,YACUC,EAAe,EACfC,iBAAoC,EACrCC,kBAA6C;IAF5C,OAAE,GAAFF,EAAE;IACF,sBAAiB,GAAjBC,iBAAiB;IAClB,uBAAkB,GAAlBC,kBAAkB;IAL3B,YAAO,GAAG,EAAE;EAMN;EAGJC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACU,KAAK,CAAC,CAAC;MACpDE,GAAG,EAAE,CACH,EAAE,EACF,CACEZ,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EACvBb,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,CACzB;KAGJ,CAAC;EACJ;EACA,IAAIC,KAAK;IACP,OAAO,IAAI,CAACP,SAAS,CAACQ,GAAG,CAAC,OAAO,CAAgB;EACnD;EACA,IAAIC,GAAG;IACL,OAAO,IAAI,CAACT,SAAS,CAACQ,GAAG,CAAC,KAAK,CAAgB;EACjD;EACAE,KAAK;IACH,IAAI,CAACb,iBAAiB,CACnBc,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,KAAK,EAAE,IAAI,CAACH,GAAG,CAACG,KAAK,CAAC,CAC3CC,SAAS,CAAEC,GAAQ,IAAI;MACtB,IAAIA,GAAG,CAACC,QAAQ,EAAE,KAAK,SAAS,EAAE;QAChC,IAAI,CAACC,OAAO,GAAG,yBAAyB;QACxC,IAAI,CAAClB,kBAAkB,CAACmB,OAAO,CAACH,GAAG,CAACC,QAAQ,EAAE,CAAC;QAC/CG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,kBAAkB,CAACsB,OAAO,EAAE,CAAC;OAC/C,MAAM;QACL,IAAI,CAACJ,OAAO,GAAG,sBAAsB;;IAEzC,CAAC,CAAC;EACN;;SA3CStB,cAAc;;mBAAdA,MAAc;AAAA;;QAAdA,MAAc;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3BhC,+BAAmD;MAArBA;QAAA,OAAYiC,WAAO;MAAA,EAAC;MAGhDjC,8BAAkB;MACsBA,qBAAK;MAAAA,iBAAQ;MACnDA,2BAA4E;MAC5EA,+DAEM;MACNA,+DAEM;MACRA,iBAAM;MAGNA,8BAAkB;MACoBA,wBAAQ;MAAAA,iBAAQ;MACpDA,4BAA2E;MAC3EA,iEAEM;MACNA,iEAGM;MACRA,iBAAM;MAGNA,4BAAK;MAEDA,wBACF;MAAAA,iBAAS;MAGXA,+BAA8B;MACHA,aAAW;MAAAA,iBAAK;;;MAnCvCA,yCAAuB;MAMWA,eAAkE;MAAlEA,iIAAkE;MAGlEA,eAA+D;MAA/DA,8HAA+D;MAS/DA,eAA4D;MAA5DA,yHAA4D;MAI7FA,eAA0F;MAA1FA,2LAA0F;MAOvEA,eAA8B;MAA9BA,gDAA8B;MAM3BA,eAAW;MAAXA,iCAAW","names":["Validators","i0","LoginComponent","constructor","fb","navigationService","userAuthentication","ngOnInit","loginForm","group","email","required","pwd","minLength","maxLength","Email","get","PWD","login","loginUser","value","subscribe","res","toString","message","setUser","console","log","getUser","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\login\\login.component.ts","C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { NavigationService } from '../services/navigation.service';\nimport { UserAuthenticationService } from '../services/user-authentication.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  message = ''\n\n  constructor(\n    private fb: FormBuilder,\n    private navigationService: NavigationService,\n    public userAuthentication: UserAuthenticationService,\n    ) { }\n\n\n    ngOnInit(): void {\n      this.loginForm = this.fb.group({\n        email: ['', [Validators.required, Validators.email]],\n        pwd: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(6),\n            Validators.maxLength(15)\n          ]\n        ],\n\n      })\n    }\n    get Email(): FormControl {\n      return this.loginForm.get('email') as FormControl\n    }\n    get PWD(): FormControl {\n      return this.loginForm.get('pwd') as FormControl\n    }\n    login() {\n      this.navigationService\n        .loginUser(this.Email.value, this.PWD.value)\n        .subscribe((res: any) => {\n          if (res.toString() !== 'invalid') {\n            this.message = 'Logged In Successfully.';\n            this.userAuthentication.setUser(res.toString());\n            console.log(this.userAuthentication.getUser());\n          } else {\n            this.message = 'Invalid Credentials!';\n          }\n        });\n    }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n\n  <!-- Email -->\n  <div class=\"mb-3\">\n    <label for=\"email\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\">\n    <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['required'] && (Email.dirty || Email.touched)\">\n      Email is Required\n    </div>\n    <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['email'] && (Email.dirty || Email.touched)\">\n      Email is Invalid.\n    </div>\n  </div>\n\n  <!-- Password -->\n  <div class=\"mb-3\">\n    <label for=\"pwd\" class=\"form-label\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"pwd\" formControlName=\"pwd\">\n    <div class=\"form-text text-danger\" *ngIf=\"PWD.errors?.['required'] && (PWD.dirty || PWD.touched)\">\n      Password is Required\n    </div>\n    <div class=\"form-text text-danger\"\n      *ngIf=\"PWD.errors?.['minlength'] || PWD.errors?.['maxlength'] && (PWD.dirty || PWD.touched)\">\n      Password should be at least 6 and at the max 15 characters long.\n    </div>\n  </div>\n\n  <!-- Login Button -->\n  <div>\n    <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"d-block mx-auto btn btn-outline-primary\">\n      Login\n    </button>\n  </div>\n\n  <div class=\"mt-3 text-center\">\n    <h5 class=\"text-success\">{{message}}</h5>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}