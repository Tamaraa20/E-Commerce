{"ast":null,"code":"var _class;\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NavigationService {\n  constructor(http) {\n    this.http = http;\n    this.baseurl = 'https://localhost:7032/api/Shopping/';\n  }\n  getCategoryList() {\n    let url = this.baseurl + 'GetCategoryList';\n    return this.http.get(url).pipe(map(categories => categories.map(category => {\n      let mappedCategory = {\n        id: category.categoryId,\n        category: category.category,\n        subCategory: category.subCategory\n      };\n      return mappedCategory;\n    })));\n  }\n  getProducts(category, subCategory, count) {\n    return this.http.get(this.baseurl + 'GetProducts', {\n      params: new HttpParams().set('category', category).set('subCategory', subCategory).set('count', count)\n    });\n  }\n  getProdcut(id) {\n    let url = this.baseurl + \"GetProduct/\" + id;\n    return this.http.get(url);\n  }\n  registerUser(user) {\n    let url = this.baseurl + \"RegisterUser\";\n    return this.http.post(url, user, {\n      responseType: 'text'\n    });\n  }\n  loginUser(email, password) {\n    let url = this.baseurl + \"LoginUser\";\n    return this.http.post(url, {\n      Email: email,\n      Password: password\n    }, {\n      responseType: 'text'\n    });\n  }\n  submitReview(userid, productid, review) {\n    let obj = {\n      User: {\n        Id: userid\n      },\n      Product: {\n        productId: productid\n      },\n      Value: review\n    };\n    let url = this.baseurl + \"InsertReview\";\n    return this.http.post(url, obj, {\n      responseType: 'text'\n    });\n  }\n  getAllReviewsOfProduct(productId) {\n    let url = this.baseurl + 'GetProductReviews/' + productId;\n    return this.http.get(url);\n  }\n  addToCard(userid, productid) {\n    let url = this.baseurl + 'InsertCartItem/' + userid + '/' + productid;\n    return this.http.post(url, null, {\n      responseType: 'text'\n    });\n  }\n  getActiveCartOfUser(userid) {\n    let url = this.baseurl + 'GetActiveCartOfUser/' + userid;\n    return this.http.get(url);\n  }\n  getAllPreviusCarts(userid) {\n    let url = this.baseurl + 'GetAllPreviousCartsOfUser/' + userid;\n    return this.http.get(url);\n  }\n  getPaymentMethod() {\n    let url = this.baseurl + 'GetPaymentMethods';\n    return this.http.get(url);\n  }\n  insertPayment(payment) {\n    return this.http.post(this.baseurl + 'InsertPayment', payment, {\n      responseType: 'text'\n    });\n  }\n  insertOrder(order) {\n    return this.http.post(this.baseurl + 'InsertOrder', order);\n  }\n  deleteCartItem(cartItemId) {\n    return this.http.delete(this.baseurl + 'DeleteCartItem/' + cartItemId);\n  }\n}\n_class = NavigationService;\n_class.ɵfac = function NavigationService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","map","NavigationService","constructor","http","getCategoryList","url","baseurl","get","pipe","categories","category","mappedCategory","id","categoryId","subCategory","getProducts","count","params","set","getProdcut","registerUser","user","post","responseType","loginUser","email","password","Email","Password","submitReview","userid","productid","review","obj","User","Id","Product","productId","Value","getAllReviewsOfProduct","addToCard","getActiveCartOfUser","getAllPreviusCarts","getPaymentMethod","insertPayment","payment","insertOrder","order","deleteCartItem","cartItemId","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\services\\navigation.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport { Category } from '../models/category';\nimport { User } from '../models/user';\nimport { PaymentMethod } from '../models/paymentMethod';\nimport { Payment } from '../models/payment';\nimport { Order } from '../models/order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  baseurl = 'https://localhost:7032/api/Shopping/'\n  items: any;\n\n  constructor(private http: HttpClient) { }\n\n  getCategoryList() {\n    let url = this.baseurl + 'GetCategoryList'\n    return this.http.get<any[]>(url).pipe(\n      map((categories) =>\n        categories.map((category) => {\n          let mappedCategory: Category = {\n            id: category.categoryId,\n            category: category.category,\n            subCategory: category.subCategory\n          };\n          return mappedCategory\n        })\n      )\n    )\n  }\n\n  getProducts(category: string, subCategory: string, count: number) {\n    return this.http.get<any[]>(this.baseurl + 'GetProducts', {\n      params: new HttpParams()\n        .set('category', category)\n        .set('subCategory', subCategory)\n        .set('count', count)\n    })\n  }\n\n  getProdcut(id: number) {\n    let url = this.baseurl + \"GetProduct/\" + id\n    return this.http.get(url)\n  }\n\n  registerUser(user: User) {\n    let url = this.baseurl + \"RegisterUser\"\n    return this.http.post(url, user, { responseType: 'text' });\n  }\n\n  loginUser(email: string, password: string) {\n    let url = this.baseurl + \"LoginUser\"\n    return this.http.post(\n      url, { Email: email, Password: password },\n      { responseType: 'text' }\n    )\n  }\n\n\n  submitReview(userid: number, productid: number, review: string) {\n    let obj: any = {\n      User: {\n        Id: userid\n      },\n      Product: {\n        productId: productid\n      },\n      Value: review\n    }\n    let url = this.baseurl + \"InsertReview\"\n    return this.http.post(url, obj, { responseType: 'text' })\n  }\n\n  getAllReviewsOfProduct(productId: number) {\n    let url = this.baseurl + 'GetProductReviews/' + productId;\n    return this.http.get(url);\n  }\n\n\n  addToCard(userid: number, productid: number) {\n    let url = this.baseurl + 'InsertCartItem/' + userid + '/' + productid;\n    return this.http.post(url, null, { responseType: 'text' })\n  }\n\n  getActiveCartOfUser(userid: number) {\n    let url = this.baseurl + 'GetActiveCartOfUser/' + userid\n    return this.http.get(url)\n  }\n\n  getAllPreviusCarts(userid: number) {\n    let url = this.baseurl + 'GetAllPreviousCartsOfUser/' + userid;\n    return this.http.get(url)\n  }\n\n  getPaymentMethod() {\n    let url = this.baseurl + 'GetPaymentMethods'\n    return this.http.get<PaymentMethod[]>(url)\n  }\n\n  insertPayment(payment: Payment) {\n    return this.http.post(this.baseurl + 'InsertPayment', payment, {\n      responseType: 'text'\n    })\n  }\n\n  insertOrder(order: Order) {\n    return this.http.post(this.baseurl + 'InsertOrder', order)\n  }\n\n\n  deleteCartItem(cartItemId: number) {\n    return this.http.delete(this.baseurl + 'DeleteCartItem/' +  cartItemId);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}