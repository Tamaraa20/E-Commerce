{"ast":null,"code":"var _class;\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NavigationService {\n  constructor(http) {\n    this.http = http;\n    this.baseurl = 'https://localhost:7264/api/Shopping/';\n  }\n  getCategoryList() {\n    let url = this.baseurl + 'GetCategoryList';\n    return this.http.get(url).pipe(map(categories => categories.map(category => {\n      let mappedCategory = {\n        categoryId: category.categoryId,\n        category: category.category,\n        subCategory: category.subCategory\n      };\n      return mappedCategory;\n    })));\n  }\n  getProducts(category, subCategory, count) {\n    return this.http.get(this.baseurl + 'GetProducts', {\n      params: new HttpParams().set('category', category).set('subCategory', subCategory).set('count', count)\n    });\n  }\n  getProdcut(id) {\n    let url = this.baseurl + \"GetProduct/\" + id;\n    return this.http.get(url);\n  }\n  registerUser(user) {\n    let url = this.baseurl + \"RegisterUser\";\n    return this.http.post(url, user, {\n      responseType: 'text'\n    });\n  }\n  loginUser(email, password) {\n    let url = this.baseurl + \"LoginUser\";\n    return this.http.post(url, {\n      Email: email,\n      Password: password\n    }, {\n      responseType: 'text'\n    });\n  }\n  addToCard(userid, productid) {\n    let url = this.baseurl + 'InsertCartItem/' + userid + '/' + productid;\n    return this.http.post(url, null, {\n      responseType: 'text'\n    });\n  }\n  getAllReviewsOfProduct(productId) {\n    let url = this.baseurl + 'GetProductReviews/' + productId;\n    return this.http.get(url);\n  }\n}\n_class = NavigationService;\n_class.ɵfac = function NavigationService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,GAAG,QAAQ,MAAM;;;AAO1B,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,YAAO,GAAG,sCAAsC;EAGR;EAExCC,eAAe;IACb,IAAIC,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,iBAAiB;IAC1C,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQF,GAAG,CAAC,CAACG,IAAI,CACnCR,GAAG,CAAES,UAAU,IACbA,UAAU,CAACT,GAAG,CAAEU,QAAQ,IAAI;MAC1B,IAAIC,cAAc,GAAa;QAC7BC,UAAU,EAAEF,QAAQ,CAACE,UAAU;QAC/BF,QAAQ,EAAEA,QAAQ,CAACA,QAAQ;QAC3BG,WAAW,EAAEH,QAAQ,CAACG;OACvB;MACD,OAAOF,cAAc;IACvB,CAAC,CAAC,CACH,CACF;EACH;EAEAG,WAAW,CAACJ,QAAgB,EAAEG,WAAmB,EAAEE,KAAa;IAC9D,OAAO,IAAI,CAACZ,IAAI,CAACI,GAAG,CAAQ,IAAI,CAACD,OAAO,GAAG,aAAa,EAAE;MACxDU,MAAM,EAAE,IAAIjB,UAAU,EAAE,CACrBkB,GAAG,CAAC,UAAU,EAAEP,QAAQ,CAAC,CACzBO,GAAG,CAAC,aAAa,EAAEJ,WAAW,CAAC,CAC/BI,GAAG,CAAC,OAAO,EAAEF,KAAK;KACtB,CAAC;EACJ;EAEAG,UAAU,CAACC,EAAU;IACnB,IAAId,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,aAAa,GAAGa,EAAE;IAC3C,OAAO,IAAI,CAAChB,IAAI,CAACI,GAAG,CAACF,GAAG,CAAC;EAC3B;EAEAe,YAAY,CAACC,IAAU;IACrB,IAAIhB,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,cAAc;IACvC,OAAO,IAAI,CAACH,IAAI,CAACmB,IAAI,CAACjB,GAAG,EAAEgB,IAAI,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EAC5D;EAEAC,SAAS,CAACC,KAAa,EAAEC,QAAgB;IACvC,IAAIrB,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,WAAW;IACpC,OAAO,IAAI,CAACH,IAAI,CAACmB,IAAI,CACnBjB,GAAG,EAAE;MAAEsB,KAAK,EAAEF,KAAK;MAAEG,QAAQ,EAAEF;IAAQ,CAAE,EACzC;MAAEH,YAAY,EAAE;IAAM,CAAE,CACzB;EACH;EAIAM,SAAS,CAACC,MAAc,EAAEC,SAAiB;IACzC,IAAI1B,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,iBAAiB,GAAGwB,MAAM,GAAG,GAAG,GAAGC,SAAS;IACrE,OAAO,IAAI,CAAC5B,IAAI,CAACmB,IAAI,CAACjB,GAAG,EAAE,IAAI,EAAE;MAAEkB,YAAY,EAAE;IAAM,CAAE,CAAC;EAC5D;EAEAS,sBAAsB,CAACC,SAAiB;IACtC,IAAI5B,GAAG,GAAG,IAAI,CAACC,OAAO,GAAG,oBAAoB,GAAG2B,SAAS;IACzD,OAAO,IAAI,CAAC9B,IAAI,CAACI,GAAG,CAACF,GAAG,CAAC;EAC3B;;SA3DWJ,iBAAiB;;mBAAjBA,MAAiB;AAAA;;SAAjBA,MAAiB;EAAAiC,SAAjBjC,MAAiB;EAAAkC,YAFhB;AAAM","names":["HttpParams","map","NavigationService","constructor","http","getCategoryList","url","baseurl","get","pipe","categories","category","mappedCategory","categoryId","subCategory","getProducts","count","params","set","getProdcut","id","registerUser","user","post","responseType","loginUser","email","password","Email","Password","addToCard","userid","productid","getAllReviewsOfProduct","productId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\services\\navigation.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport { Category } from '../models/category';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  baseurl = 'https://localhost:7264/api/Shopping/'\n  items: any;\n\n  constructor(private http: HttpClient) { }\n\n  getCategoryList() {\n    let url = this.baseurl + 'GetCategoryList'\n    return this.http.get<any[]>(url).pipe(\n      map((categories) =>\n        categories.map((category) => {\n          let mappedCategory: Category = {\n            categoryId: category.categoryId,\n            category: category.category,\n            subCategory: category.subCategory\n          };\n          return mappedCategory\n        })\n      )\n    )\n  }\n\n  getProducts(category: string, subCategory: string, count: number) {\n    return this.http.get<any[]>(this.baseurl + 'GetProducts', {\n      params: new HttpParams()\n        .set('category', category)\n        .set('subCategory', subCategory)\n        .set('count', count)\n    })\n  }\n\n  getProdcut(id: number) {\n    let url = this.baseurl + \"GetProduct/\" + id\n    return this.http.get(url)\n  }\n\n  registerUser(user: User) {\n    let url = this.baseurl + \"RegisterUser\"\n    return this.http.post(url, user, { responseType: 'text' });\n  }\n\n  loginUser(email: string, password: string) {\n    let url = this.baseurl + \"LoginUser\"\n    return this.http.post(\n      url, { Email: email, Password: password },\n      { responseType: 'text' }\n    )\n  }\n\n\n\n  addToCard(userid: number, productid: number) {\n    let url = this.baseurl + 'InsertCartItem/' + userid + '/' + productid;\n    return this.http.post(url, null, { responseType: 'text' })\n  }\n\n  getAllReviewsOfProduct(productId: number) {\n    let url = this.baseurl + 'GetProductReviews/' + productId;\n    return this.http.get(url);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}