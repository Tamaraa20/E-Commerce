{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/navigation.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class AccountComponent {\n  constructor(navigationService, route, router, fb) {\n    this.navigationService = navigationService;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.message = '';\n  }\n  // ngOnInit(): void {\n  //   this.accountForm = this.fb.group({\n  //     firstname: [''],\n  //     lastname: [''],\n  //     email: [''],\n  //     address: [''],\n  //     mobile: [''],\n  //   });\n  //   if (this.route.snapshot.queryParams['edit'] == 'true') {\n  //     this.navigationService.getActiveCartOfUser(this.route.snapshot.params['id'])\n  //       .subscribe((data: any) => {\n  //         this.accountForm.patchValue(data); // Use patchValue to update specific form controls\n  //       });\n  //   }\n  // }\n  ngOnInit() {\n    this.accountForm = this.fb.group({\n      firstname: [''],\n      lastname: [''],\n      email: [''],\n      address: [''],\n      mobile: ['']\n    });\n    this.route.params.subscribe(params => {\n      const userId = params['id'];\n      const isEditMode = params['account-details'] === 'true';\n      console.log('UserID:', userId, 'Edit Mode:', isEditMode);\n      if (isEditMode) {\n        this.navigationService.getActiveCartOfUser(userId).subscribe(data => {\n          console.log('User Data:', data);\n          this.accountForm.patchValue(data);\n        }, error => {\n          console.error('Error fetching user data:', error);\n        });\n      }\n    });\n  }\n  save() {\n    const newUser = this.accountForm.getRawValue();\n    if (newUser.id !== undefined && newUser.id !== null) {\n      this.navigationService.updateUser(newUser).subscribe(data => {\n        this.goBack();\n      }, error => {\n        console.error(error);\n      });\n    } else {\n      // Handle the case when id is not available (e.g., show an error message or log)\n      console.error(\"User id is undefined or null\");\n    }\n  }\n  goBack() {\n    this.router.navigate(['']);\n  }\n}\n_class = AccountComponent;\n_class.ɵfac = function AccountComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.NavigationService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-account\"]],\n  decls: 29,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"mb-3\"], [1, \"col\"], [\"for\", \"firstname\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\", 1, \"form-control\"], [\"for\", \"lastname\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"lastname\", \"formControlName\", \"lastname\", 1, \"form-control\"], [1, \"mb-3\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"address\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"address\", \"formControlName\", \"address\", 1, \"form-control\"], [\"for\", \"mobile\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"mobile\", \"formControlName\", \"mobile\", 1, \"form-control\"], [1, \"mx-auto\", \"text-center\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\"]],\n  template: function AccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Account info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AccountComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"label\", 8);\n      i0.ɵɵtext(14, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"label\", 10);\n      i0.ɵɵtext(18, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 7)(21, \"label\", 12);\n      i0.ɵɵtext(22, \"Mobile\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 14)(25, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function AccountComponent_Template_button_click_25_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(26, \"Zapamti\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function AccountComponent_Template_button_click_27_listener() {\n        return ctx.goBack();\n      });\n      i0.ɵɵtext(28, \"Nazad\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.accountForm);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["AccountComponent","constructor","navigationService","route","router","fb","ngOnInit","accountForm","group","firstname","lastname","email","address","mobile","params","subscribe","userId","isEditMode","console","log","getActiveCartOfUser","data","patchValue","error","save","newUser","getRawValue","id","undefined","updateUser","goBack","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\account\\account.component.ts","C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\account\\account.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NavigationService } from '../services/navigation.service';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../models/user';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit{\n\n  accountForm!: FormGroup;\n  message = '';\n\n  constructor(\n    private navigationService: NavigationService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private fb: FormBuilder\n  ) {}\n\n\n  // ngOnInit(): void {\n  //   this.accountForm = this.fb.group({\n  //     firstname: [''],\n  //     lastname: [''],\n  //     email: [''],\n  //     address: [''],\n  //     mobile: [''],\n  //   });\n  //   if (this.route.snapshot.queryParams['edit'] == 'true') {\n  //     this.navigationService.getActiveCartOfUser(this.route.snapshot.params['id'])\n  //       .subscribe((data: any) => {\n  //         this.accountForm.patchValue(data); // Use patchValue to update specific form controls\n  //       });\n  //   }\n  // }\n\n  ngOnInit(): void {\n    this.accountForm = this.fb.group({\n      firstname: [''],\n      lastname: [''],\n      email: [''],\n      address: [''],\n      mobile: [''],\n    });\n\n    this.route.params.subscribe(params => {\n      const userId = params['id'];\n      const isEditMode = params['account-details'] === 'true';\n\n      console.log('UserID:', userId, 'Edit Mode:', isEditMode);\n\n      if (isEditMode) {\n        this.navigationService.getActiveCartOfUser(userId)\n          .subscribe(\n            (data: any) => {\n              console.log('User Data:', data);\n              this.accountForm.patchValue(data);\n            },\n            (error) => {\n              console.error('Error fetching user data:', error);\n            }\n          );\n      }\n    });\n  }\n\n\n\n  save() {\n    const newUser: User = this.accountForm.getRawValue();\n\n    if (newUser.id !== undefined && newUser.id !== null) {\n      this.navigationService.updateUser(newUser).subscribe(\n        data => {\n          this.goBack();\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    } else {\n      // Handle the case when id is not available (e.g., show an error message or log)\n      console.error(\"User id is undefined or null\");\n    }\n  }\n\n\n\n  goBack() {\n    this.router.navigate(['']);\n  }\n}\n","<h1>Account info</h1>\n<form [formGroup]=\"accountForm\"  (ngSubmit)=\"save()\">\n\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <label for=\"firstname\" class=\"form-label\">First Name</label>\n      <input type=\"text\" class=\"form-control\" id=\"firstname\" formControlName=\"firstname\">\n\n      <div class=\"col\">\n        <label for=\"lastname\" class=\"form-label\">Last Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"lastname\" formControlName=\"lastname\">\n\n      </div>\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"email\" class=\"form-label\">Email</label>\n      <input type=\"text\" class=\"form-control\" id=\"email\" formControlName=\"email\">\n\n\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"address\" class=\"form-label\">Address</label>\n      <input type=\"text\" class=\"form-control\" id=\"address\" formControlName=\"address\">\n\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"mobile\" class=\"form-label\">Mobile</label>\n      <input type=\"text\" class=\"form-control\" id=\"mobile\" formControlName=\"mobile\">\n\n    </div>\n\n\n  </div>\n\n\n  <!-- account button -->\n  <div class=\"mx-auto text-center\">\n    <button mat-raised-button color=\"primary\" (click)=\"save()\">Zapamti</button>\n    <button mat-raised-button color=\"accent\" (click)=\"goBack()\">Nazad</button>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}