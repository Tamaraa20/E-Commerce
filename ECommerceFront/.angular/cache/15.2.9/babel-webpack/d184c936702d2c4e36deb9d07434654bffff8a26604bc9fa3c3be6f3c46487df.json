{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nlet ProductDetailsComponent = class ProductDetailsComponent {\n  constructor(activatedRoute, navigationService, userAuthentication, cartService) {\n    this.activatedRoute = activatedRoute;\n    this.navigationService = navigationService;\n    this.userAuthentication = userAuthentication;\n    this.cartService = cartService;\n    this.imageIndex = 1;\n    this.reviewControl = new FormControl('');\n    this.showError = false;\n    this.rewievSaved = false;\n    this.otherReviews = [];\n    this.productQuantity = 1;\n    this.removeCart = false;\n  }\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(params => {\n      let id = params.id;\n      this.navigationService.getProduct(id).subscribe(res => {\n        this.product = res;\n        this.fetchAllReviews();\n      });\n    });\n  }\n  submitReview() {\n    let review = this.reviewControl.value;\n    if (review === '' || review === null) {\n      this.showError = true;\n      return;\n    }\n    let userid = this.userAuthentication.getUser().id;\n    let productid = this.product.productId;\n    this.navigationService.submitReview(userid, productid, review).subscribe(res => {\n      this.rewievSaved = true;\n      this.fetchAllReviews();\n      this.reviewControl.setValue(\"\");\n    });\n  }\n  fetchAllReviews() {\n    this.otherReviews = [];\n    this.navigationService.getAllReviewsOfProduct(this.product.productId).subscribe(res => {\n      for (const review of res) {\n        this.otherReviews.push(review);\n      }\n    });\n  }\n};\nProductDetailsComponent = __decorate([Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})], ProductDetailsComponent);\nexport { ProductDetailsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,WAAW,QAAQ,gBAAgB;AAYrC,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EASlCC,YACUC,cAA8B,EAC9BC,iBAAoC,EACrCC,kBAA6C,EAC7CC,WAAwB;IAHvB,mBAAc,GAAdH,cAAc;IACd,sBAAiB,GAAjBC,iBAAiB;IAClB,uBAAkB,GAAlBC,kBAAkB;IAClB,gBAAW,GAAXC,WAAW;IAXpB,eAAU,GAAW,CAAC;IAEtB,kBAAa,GAAG,IAAIN,WAAW,CAAC,EAAE,CAAC;IACnC,cAAS,GAAG,KAAK;IACjB,gBAAW,GAAG,KAAK;IACnB,iBAAY,GAAa,EAAE;IAiD3B,oBAAe,GAAQ,CAAC;IACxB,eAAU,GAAC,KAAK;EA3CZ;EAEJO,QAAQ;IACN,IAAI,CAACJ,cAAc,CAACK,WAAW,CAACC,SAAS,CAAEC,MAAW,IAAI;MACxD,IAAIC,EAAE,GAAGD,MAAM,CAACC,EAAE;MAClB,IAAI,CAACP,iBAAiB,CAACQ,UAAU,CAACD,EAAE,CAAC,CAACF,SAAS,CAAEI,GAAQ,IAAI;QAC3D,IAAI,CAACC,OAAO,GAAGD,GAAG;QAClB,IAAI,CAACE,eAAe,EAAE;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;EAEJ;EAEAC,YAAY;IACV,IAAIC,MAAM,GAAG,IAAI,CAACC,aAAa,CAACC,KAAK;IACrC,IAAIF,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,IAAI,EAAE;MACpC,IAAI,CAACG,SAAS,GAAG,IAAI;MACrB;;IAEF,IAAIC,MAAM,GAAG,IAAI,CAAChB,kBAAkB,CAACiB,OAAO,EAAE,CAACX,EAAE;IACjD,IAAIY,SAAS,GAAG,IAAI,CAACT,OAAO,CAACU,SAAS;IAEtC,IAAI,CAACpB,iBAAiB,CAACY,YAAY,CAACK,MAAM,EAAEE,SAAS,EAAEN,MAAM,CAAC,CAACR,SAAS,CAAEI,GAAG,IAAI;MAC/E,IAAI,CAACY,WAAW,GAAG,IAAI;MACvB,IAAI,CAACV,eAAe,EAAE;MACtB,IAAI,CAACG,aAAa,CAACQ,QAAQ,CAAC,EAAE,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAX,eAAe;IACb,IAAI,CAACY,YAAY,GAAG,EAAE;IACtB,IAAI,CAACvB,iBAAiB,CACpBwB,sBAAsB,CAAC,IAAI,CAACd,OAAO,CAACU,SAAS,CAAC,CAC7Cf,SAAS,CAAEI,GAAQ,IAAI;MACtB,KAAK,MAAMI,MAAM,IAAIJ,GAAG,EAAE;QACxB,IAAI,CAACc,YAAY,CAACE,IAAI,CAACZ,MAAM,CAAC;;IAElC,CAAC,CAAC;EAEN;CAOD;AA5DYhB,uBAAuB,eALnCF,SAAS,CAAC;EACT+B,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACW/B,uBAAuB,CA4DnC;SA5DYA,uBAAuB","names":["Component","FormControl","ProductDetailsComponent","constructor","activatedRoute","navigationService","userAuthentication","cartService","ngOnInit","queryParams","subscribe","params","id","getProduct","res","product","fetchAllReviews","submitReview","review","reviewControl","value","showError","userid","getUser","productid","productId","rewievSaved","setValue","otherReviews","getAllReviewsOfProduct","push","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\product-details\\product-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Product } from '../models/product';\nimport { FormControl } from '@angular/forms';\nimport { Review } from '../models/review';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationService } from '../services/navigation.service';\nimport { UserAuthenticationService } from '../services/user-authentication.service';\nimport { CartService } from '../services/cart.service';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent  implements OnInit{\n\n  imageIndex: number = 1;\n   product !: Product;\n  reviewControl = new FormControl('');\n  showError = false;\n  rewievSaved = false;\n  otherReviews: Review[] = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private navigationService: NavigationService,\n    public userAuthentication: UserAuthenticationService,\n    public cartService: CartService,\n  ) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParams.subscribe((params: any) => {\n      let id = params.id;\n      this.navigationService.getProduct(id).subscribe((res: any) => {\n        this.product = res;\n        this.fetchAllReviews();\n      })\n    })\n\n  }\n\n  submitReview() {\n    let review = this.reviewControl.value;\n    if (review === '' || review === null) {\n      this.showError = true\n      return\n    }\n    let userid = this.userAuthentication.getUser().id;\n    let productid = this.product.productId;\n\n    this.navigationService.submitReview(userid, productid, review).subscribe((res) => {\n      this.rewievSaved = true;\n      this.fetchAllReviews();\n      this.reviewControl.setValue(\"\");\n    })\n  }\n\n  fetchAllReviews() {\n    this.otherReviews = [];\n    this.navigationService.\n      getAllReviewsOfProduct(this.product.productId)\n      .subscribe((res: any) => {\n        for (const review of res) {\n          this.otherReviews.push(review);\n        }\n      })\n\n  }\n\n  productData:undefined | Product;\n  productQuantity:number=1;\n  removeCart=false;\n  cartData:Product|undefined;\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}