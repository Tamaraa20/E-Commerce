{"ast":null,"code":"var _class;\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nimport * as i2 from \"./user-authentication.service\";\nimport * as i3 from \"./navigation.service\";\nexport class CartService {\n  constructor(jwt, userAuthentication, navigationService) {\n    this.jwt = jwt;\n    this.userAuthentication = userAuthentication;\n    this.navigationService = navigationService;\n    this.changeCart = new Subject();\n    this.cartDataSubject = new BehaviorSubject(null);\n  }\n  applyDiscount(price, discount) {\n    let finalPrice = price - price * (discount / 100);\n    return finalPrice;\n  }\n  // addToCart(product: Product) {\n  //   let productid = product.productId\n  //   let userid = this.userAuthentication.getUser().id;\n  //   this.navigationService.addToCard(userid, productid).subscribe((res) => {\n  //     if (res.toString() === 'inserted') this.changeCart.next(1)\n  //   })\n  // }\n  addToCart(product) {\n    let productid = product.productId;\n    let user = this.userAuthentication.getUser();\n    // Check if user is defined before proceeding\n    if (user && user.id) {\n      let userid = user.id;\n      this.navigationService.addToCard(userid, productid).subscribe(res => {\n        if (res.toString() === 'inserted') {\n          this.changeCart.next(1);\n        }\n      }, error => {\n        console.error('Error adding to cart:', error);\n        // Handle the error as needed\n      });\n    } else {\n      // Handle the case when the user or user id is not defined\n      console.error('User or user id is undefined');\n    }\n  }\n  calculatePayment(cart, payment) {\n    payment.totalAmount = 0;\n    payment.amountPaid = 0;\n    payment.amountReduced = 0;\n    for (const cartItem of cart.cartItems) {\n      payment.totalAmount += cartItem.product.price;\n      payment.amountReduced += cartItem.product.price - this.applyDiscount(cartItem.product.price, cartItem.product.offer.discount);\n      payment.amountPaid += this.applyDiscount(cartItem.product.price, cartItem.product.offer.discount);\n    }\n    if (payment.amountPaid > 50000) {\n      payment.shipingCharges = 2000;\n    } else if (payment.amountPaid > 20000) {\n      payment.shipingCharges = 1000;\n    } else if (payment.amountPaid > 5000) {\n      payment.shipingCharges = 500;\n    } else {\n      payment.shipingCharges = 200;\n    }\n  }\n  calculatePrice(cart) {\n    let pricepaid = 0;\n    for (let cartItem of cart.cartItems) {\n      pricepaid += this.applyDiscount(cartItem.product.price, cartItem.product.offer.discount);\n    }\n    return pricepaid;\n  }\n  setCartData(cartData) {\n    this.cartDataSubject.next(cartData);\n  }\n  getCartData() {\n    return this.cartDataSubject.asObservable();\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.UserAuthenticationService), i0.ɵɵinject(i3.NavigationService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Subject","CartService","constructor","jwt","userAuthentication","navigationService","applyDiscount","price","discount","finalPrice","addToCart","product","productid","productId","user","getUser","id","userid","addToCard","subscribe","res","toString","changeCart","next","error","console","calculatePayment","cart","payment","totalAmount","amountPaid","amountReduced","cartItem","cartItems","offer","shipingCharges","calculatePrice","pricepaid","setCartData","cartData","cartDataSubject","getCartData","asObservable","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\tamar\\Desktop\\ECommerce\\ECommerceFront\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from '../models/product';\nimport { UserAuthenticationService } from './user-authentication.service';\nimport { NavigationService } from './navigation.service';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { Cart } from '../models/cart';\nimport { Payment } from '../models/payment';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  changeCart = new Subject();\n\n  constructor(private jwt: JwtHelperService,\n    public userAuthentication: UserAuthenticationService,\n    private navigationService: NavigationService) { }\n\n  applyDiscount(price: number, discount: number): number {\n    let finalPrice: number = price - price * (discount / 100);\n    return finalPrice;\n  }\n\n  // addToCart(product: Product) {\n  //   let productid = product.productId\n  //   let userid = this.userAuthentication.getUser().id;\n\n  //   this.navigationService.addToCard(userid, productid).subscribe((res) => {\n  //     if (res.toString() === 'inserted') this.changeCart.next(1)\n  //   })\n  // }\n\n  addToCart(product: Product) {\n    let productid = product.productId;\n    let user = this.userAuthentication.getUser();\n\n    // Check if user is defined before proceeding\n    if (user && user.id) {\n      let userid = user.id;\n\n      this.navigationService.addToCard(userid, productid).subscribe(\n        (res) => {\n          if (res.toString() === 'inserted') {\n            this.changeCart.next(1);\n          }\n        },\n        (error) => {\n          console.error('Error adding to cart:', error);\n          // Handle the error as needed\n        }\n      );\n    } else {\n      // Handle the case when the user or user id is not defined\n      console.error('User or user id is undefined');\n    }\n  }\n\n\n  calculatePayment(cart: Cart, payment: Payment) {\n    payment.totalAmount = 0;\n    payment.amountPaid = 0;\n    payment.amountReduced = 0;\n\n    for (const cartItem of cart.cartItems) {\n      payment.totalAmount += cartItem.product.price;\n\n      payment.amountReduced +=\n        cartItem.product.price -\n        this.applyDiscount(\n          cartItem.product.price,\n          cartItem.product.offer.discount\n        );\n      payment.amountPaid += this.applyDiscount(\n        cartItem.product.price,\n        cartItem.product.offer.discount\n      );\n    }\n    if (payment.amountPaid > 50000) {\n      payment.shipingCharges = 2000\n    }\n    else if (payment.amountPaid > 20000) {\n      payment.shipingCharges = 1000\n    } else if (payment.amountPaid > 5000) {\n      payment.shipingCharges = 500\n    }\n    else {\n      payment.shipingCharges = 200\n    }\n  }\n\n  calculatePrice(cart: Cart) {\n    let pricepaid = 0;\n    for (let cartItem of cart.cartItems) {\n      pricepaid += this.applyDiscount(\n        cartItem.product.price,\n        cartItem.product.offer.discount\n      )\n\n    }\n    return pricepaid\n  }\n\n  private cartDataSubject = new BehaviorSubject<any>(null);\n  setCartData(cartData: any) {\n    this.cartDataSubject.next(cartData);\n  }\n\n  getCartData(): Observable<any> {\n    return this.cartDataSubject.asObservable();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}